<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>lookAtAGlance on</title><link>https://mindulle.github.io/garden/tags/lookAtAGlance/</link><description>Recent content in lookAtAGlance on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://mindulle.github.io/garden/tags/lookAtAGlance/index.xml" rel="self" type="application/rss+xml"/><item><title>Untitled</title><link>https://mindulle.github.io/garden/Develop/Seeds/Grocery/WebDev/Backend/Look-over-at-a-glance/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mindulle.github.io/garden/Develop/Seeds/Grocery/WebDev/Backend/Look-over-at-a-glance/</guid><description>Libs and Fwks FastAPI Roles And Responsibilities Task Description Backend Requirement Backend Example Backend Real-world Examples Simple Real-world GitHub Project API development Ability to design and develop a robust and scalable API Implement API endpoints using a framework or library, and design an API that is flexible, secure, and easy to use for front-end developers Build an API using Node.</description></item><item><title>👓Look at a glance</title><link>https://mindulle.github.io/garden/Develop/Trees/Dev/ingredients/Look-at-a-glance/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mindulle.github.io/garden/Develop/Trees/Dev/ingredients/Look-at-a-glance/</guid><description>문법 기초 Shell Python Js &amp;amp; Ts golang 고급 Python Js &amp;amp; Ts golang 설탕 Python Js &amp;amp; Ts golang 트릭 Python Js &amp;amp; Ts golang 설정 개발 전 환경설정 작업 Python Js &amp;amp; Ts Golang 에디터 설치 및 설정 버전 관리 시스템 설정하기 린트 설정하기 포매팅 설정하기 테스트 환경 설정하기 작성 후 CLI 프로그램 개발 시 참고용으로 사용하기 Practical usages</description></item><item><title>👓Look over at a glance</title><link>https://mindulle.github.io/garden/Develop/Seeds/Grocery/WebDev/Frontend/Look-over-at-a-glance/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mindulle.github.io/garden/Develop/Seeds/Grocery/WebDev/Frontend/Look-over-at-a-glance/</guid><description>Libs and Fwks React Vanilla Vue Roles and Responsibilities Task Description Frontend Requirement Frontend Example Frontend Real-world Examples Simple Real-world GitHub Project Accessibility Ability to create frontend applications that are accessible to users with disabilities Ability to understand accessibility principles and use them to create frontend applications that are accessible to users with disabilities Use accessibility testing tools like Axe or Wave to ensure that frontend applications are accessible to users with disabilities Ensure that frontend applications are accessible to all users, regardless of disability https://github.</description></item><item><title>👓Look over at a glance</title><link>https://mindulle.github.io/garden/Develop/Trees/Dev/Code/Design/Patterns/Look-over-at-a-glance/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mindulle.github.io/garden/Develop/Trees/Dev/Code/Design/Patterns/Look-over-at-a-glance/</guid><description>Based on contents from&amp;hellip; refactoring guru Design Pattern Target Audience Applicability Example Scenario Implementation Requirements Implementation Considerations Pros Cons Diagram Abstract Factory OOP programmers When there is a need to create families of related or dependent objects without specifying their concrete classes.</description></item><item><title>👓Look over at a glance</title><link>https://mindulle.github.io/garden/Develop/Trees/Dev/Code/Design/Principles/Look-over-at-a-glance/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mindulle.github.io/garden/Develop/Trees/Dev/Code/Design/Principles/Look-over-at-a-glance/</guid><description> Principle Description Importance Benefits Examples Best Practices Bad Good SOLID Principles A set of five principles for object-oriented software design, including Single Responsibility, Open-Closed, Liskov Substitution, Interface Segregation, and Dependency Inversion Improves maintainability, flexibility, and scalability Easier to modify and reuse components Designing classes with a single responsibility, using abstract classes or interfaces to define behavior, using dependency injection to invert dependencies Apply these principles to achieve better code quality and reduce coupling and complexity [[Develop/Trees/Dev/Code/Design/Principles/Go example/SOLID - BAD|code]] [[Develop/Trees/Dev/Code/Design/Principles/Go example/SOLID - GOOD|code]] DRY Principle Don&amp;rsquo;t Repeat Yourself Improves maintainability and scalability Easier to modify and update code Refactoring duplicated code into reusable functions or modules, using variables and functions instead of hard-coded values Avoid duplicating code or logic, and strive for code reuse [[Develop/Trees/Dev/Code/Design/Principles/Go example/DRY - BAD|code]] [[Develop/Trees/Dev/Code/Design/Principles/Go example/DRY - GOOD|code]] KISS Principle Keep it simple, stupid Improves maintainability and usability Easier to understand and modify Removing unnecessary complexity or features, avoiding over-engineering Refactor complex code to make it simpler YAGNI Principle You Aren&amp;rsquo;t Gonna Need It Avoid implementing functionality that is not needed yet Improves maintainability and scalability Easier to modify and reduce the likelihood of introducing bugs Avoiding premature optimization or adding unnecessary features Law of Demeter Only talk to your immediate friends Improves maintainability and reduces coupling Easier to modify and test code Limiting the number of objects that a class interacts with, using method chaining to reduce coupling Design classes with limited responsibilities and minimize the dependencies between objects Composition Over Inheritance Favor object composition over class inheritance Improves flexibility and maintainability Easier to modify and reuse components Using interfaces or abstract classes to define behavior, composing objects to add functionality Use design patterns such as the Decorator or Composite pattern Single Responsibility Principle A class should have only one reason to change Improves maintainability and reduces coupling Easier to modify and test code Designing classes with a single responsibility, separating concerns into different classes or modules Ensure that each class has a clear and well-defined responsibility Open-Closed Principle Software entities should be open for extension, but closed for modification Improves maintainability and scalability Easier to add new functionality without breaking existing code Using abstract classes or interfaces to define behavior, implementing new behavior by adding new classes or methods Design software to be modular and extensible, using abstractions to reduce coupling Dependency Inversion Principle Depend on abstractions, not concrete implementations Improves flexibility and maintainability Easier to change implementation details without affecting the rest of the code Using interfaces or abstract classes, injecting dependencies via constructors or setters Use design patterns such as the Dependency Injection or Inversion of Control (IoC) pattern Interface Segregation Principle A client should not be forced to depend on methods it does not use Improves maintainability and reduces coupling Easier to modify and test code Separating interfaces into smaller, more specialized interfaces, avoiding &amp;ldquo;fat&amp;rdquo; interfaces with too many methods Design interfaces to be focused and cohesive, and avoid exposing unnecessary methods or behavior</description></item><item><title>👓Look over at a glance</title><link>https://mindulle.github.io/garden/Develop/Trees/Dev/ingredients/Languages/Go/make-a-package/Look-over-at-a-glance/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mindulle.github.io/garden/Develop/Trees/Dev/ingredients/Languages/Go/make-a-package/Look-over-at-a-glance/</guid><description>Component Description Example Implementation for the original function The core functionality of the package; should be designed to be efficient, reliable, and easy to use.</description></item><item><title>👓Look over at a glance</title><link>https://mindulle.github.io/garden/Develop/Trees/Dev/Lifecycle/Look-over-at-a-glance/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mindulle.github.io/garden/Develop/Trees/Dev/Lifecycle/Look-over-at-a-glance/</guid><description/></item><item><title>👓Look over at a glance</title><link>https://mindulle.github.io/garden/Develop/Trees/Dev/Realworld/Look-over-at-a-glance/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mindulle.github.io/garden/Develop/Trees/Dev/Realworld/Look-over-at-a-glance/</guid><description>모듈 실용적이고 사용이 잦음 Terminal Python Js &amp;amp; Ts golang 적게 사용되지만 가치가 있음 Python Js &amp;amp; Ts golang 주제별 분류.</description></item></channel></rss>